#--------------------------------------------------------------------------------
###COMBINE CURVES###
#--------------------------------------------------------------------------------
import maya.cmds as cmds

selection = cmds.ls(sl=True)

def combine_curves(curves):
	grp = cmds.group(em=True, n="combined_NUL")
	for i in curves:
		print i
		cmds.makeIdentity(apply=True, t=True, r=True, s=True)
		shapes = cmds.listRelatives(i, shapes=True)[0]
		print shapes
		cmds.parent(shapes, grp, r=True, s=True)
		cmds.delete(i)
	cmds.select(d=True)
	
combine_curves(selection)

#--------------------------------------------------------------------------------
###GET CURVE DATA###
#--------------------------------------------------------------------------------
import maya.cmds as cmds

def get_curve_data(curve_obj):
	cmds.delete(curve_obj, ch=True)  # Enable Cvs to "bake" 
	curve_shapes = cmds.listRelatives(curve_obj, shapes=True, type="nurbsCurve", f=True)

	data = []
	
	for shape in curve_shapes:
		degree = cmds.getAttr(shape + ".degree")	
		spans = cmds.getAttr(shape + ".spans")
		form = cmds.getAttr(shape + ".form")
		cv_count = degree + spans
		knot_count = cv_count + degree -1
		
		cv_list = []
		cvs = cmds.ls("{}.cv[*]".format(shape), l=True)[0]
		cv_list = cmds.getAttr(cvs)
		
		shape_data = []
		shape_data.append(degree)
		shape_data.append(spans)
		shape_data.append(form)
		shape_data.append(knot_count)
		shape_data.append(cv_list)
		data.append(shape_data)
	
	return data


#--------------------------------------------------------------------------------
###BUILD CURVE###
#--------------------------------------------------------------------------------
def build_curve(data, name=None, align=""):
	align = cmds.ls(sl=True)
	if name == None:
		name = "curve"
	grp = cmds.group(em=True, n=name + "_CTRL")
	
	curves = []
	shapes = []
	
	for shape_data in data:
		degree = shape_data[0]
		spans = shape_data[1]
		form = shape_data[2]
		knot_count = shape_data[3]
		cv_list = [[pos[0], pos[1], pos[2]] for pos in shape_data[4]] # Creates a new generated list otherwise ```cv_list.append(cv_list[i])``` will change it
		
		cv_knots = []
		
		if form == 0:  # curve is open
			if degree == 1: #  curve is linear
				for i in range (0, knot_count):
					cv_knots.append(i)
			else:  # curve is cubic
				knot_iter = 0
				for i in range(0, knot_count):
					if i >= 3 and i <= knot_count-3:
						knot_iter += 1
					cv_knots.append(knot_iter)
		
		elif form == 2:  # Periodic Curve
			for i in range(3):
				cv_list.append(cv_list[i])  # appends the first 3 CV coordinates to the end of cv_list
				
			for i in range(knot_count):
				cv_knots.append(i-2)  # Shifts down the list down by 2
				
		shapes.append(cmds.curve(per=form, d=degree, p=cv_list, k=cv_knots))

	for i in shapes:
		shape = cmds.listRelatives(i, shapes=True)[0]
		cmds.parent(shape, grp, r=True, s=True)
		cmds.delete(i)
	nul = cmds.group(em=True, n=name + "_NUL")
	cmds.parent(grp, nul)
	if align==True:
		cmds.matchTransform(nul, align)
	else:
		pass
	cmds.select(nul)
